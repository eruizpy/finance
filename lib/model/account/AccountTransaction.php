<?php


/**
 * Skeleton subclass for representing a row from the 'account_transaction' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Feb 17 18:59:48 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.account
 */
class AccountTransaction extends BaseAccountTransaction 
{
  /**
   * Initializes internal state of InvestmentTransaction object.
   * @see        parent::__construct()
   */
  public function __construct(Transaction $transaction = null, Account $account = null) 
  {
    $this->setTransaction($transaction);
    $this->setAccount($account);
    
    parent::__construct();
  }

  /**
   * Post insert
   * 
   * @param PropelPDO $con 
   */
  public function  postInsert(PropelPDO $con = null) 
  {
    $account = $this->getAccount();

    if($this->getTransaction()->isCredit()){
      
      //set values $account
      $account->setBalance($account->getBalance() + $this->getAmount());
      $account->setAvailableBalance($account->getAvailableBalance() + $this->getAmount());

    }elseif($this->getTransaction()->isDebit()){
      
      //set values $account
      $account->setBalance($account->getBalance() - $this->getAmount());
      $account->setAvailableBalance($account->getAvailableBalance() - $this->getAmount());
    }
    
    //update $account
    $account->save();
    
    //update $this->accountBalance
    $this->setAccountBalance($this->getAccount()->getBalance());
    $this->save();
    
    $this->getTransaction()->setType(Transaction::TYPE_ACCOUNT);
    
    $this->getTransaction()->save($con);
    
    parent::postInsert($con);
  }
  
  /**
   *
   * @return type 
   */
  public function isDebit()
  {
    return $this->getTransaction()->isDebit();
  }
  
  /**
   *
   * @return type 
   */
  public function isCredit()
  {
    return $this->getTransaction()->isCredit();
  }

    /**
   * Get isDeposit
   * 
   * @return boolean 
   */
  public function isDeposit()
  {
    return $this->getTransaction()->isDeposit();
  }
  
  /**
   * Get isWithdrawal
   * 
   * @return boolean 
   */
  public function isWithdrawal()
  {
    return $this->getTransaction()->isWithdrawal();
  }
  
  /**
   * Get isCreditNote
   * 
   * @return boolean 
   */
  public function isCreditNote()
  {
    return $this->getTransaction()->isCreditNote();
  }
  
  /**
   * Get isDebitNote
   * 
   * @return boolean 
   */
  public function isDebitNote()
  {
    return $this->getTransaction()->isDebitNote();
  }
  
  /**
   * Get transactionType
   * 
   * @return TransactionType 
   */
  public function getTransactionType()
  {
    return $this->getTransaction()->getTransactionType();
  }
  
  /**
   * Get Connection
   * 
   * @return Connection 
   */
  public function getCash()
  {
    return $this->getTransaction()->getCash();
  }
  
  /**
   * Get User
   * 
   * @return sfGuardUser
   */
  public function getUser()
  {
    return $this->getTransaction()->getUser();
  }
  
  /**
   * Get amount
   * 
   * @return decimal 
   */
  public function getAmount()
  {
    return $this->getTransaction()->getAmount();
  }
  
  /**
   * Get createdAt
   * 
   * @return dataTime 
   */
  public function getCreatedAt($format = 'Y-m-d H:i:s')
  {
    return $this->getTransaction()->getCreatedAt($format);
  }
  
  /**
   * Get observation
   * 
   * @return string 
   */
  public function getObservation()
  {
    return $this->getTransaction()->getObservation();
  }
  
  /**
   * Get Operation type in text format
   * 
   * @return string 
   */
  public function getTypeOperationText()
  {
    return $this->getTransaction()->getTypeOperationText();
  }
} // AccountTransaction
