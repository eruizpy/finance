<?php


/**
 * Skeleton subclass for performing query and update operations on the 'account_transaction' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Feb 17 18:59:48 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.account
 */
class AccountTransactionPeer extends BaseAccountTransactionPeer 
{
  /**
   * do Select join transaction, connection, user, acount, associate
   * 
   * @param Criteria $criteria
   * @param type $con
   * @param type $join_behavior
   * @return cls 
   */
  public static function doSelectJoinCustom(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
  {
    $criteria = clone $criteria;

    // Set the correct dbName if it has not been overridden
    if ($criteria->getDbName() == Propel::getDefaultDB()) {
            $criteria->setDbName(self::DATABASE_NAME);
    }

    AccountTransactionPeer::addSelectColumns($criteria);
    $startcol2 = (AccountTransactionPeer::NUM_COLUMNS - AccountTransactionPeer::NUM_LAZY_LOAD_COLUMNS);

    TransactionPeer::addSelectColumns($criteria);
    $startcol3 = $startcol2 + (TransactionPeer::NUM_COLUMNS - TransactionPeer::NUM_LAZY_LOAD_COLUMNS);

    AccountPeer::addSelectColumns($criteria);
    $startcol4 = $startcol3 + (AccountPeer::NUM_COLUMNS - AccountPeer::NUM_LAZY_LOAD_COLUMNS);
    
    TransactionTypePeer::addSelectColumns($criteria);
    $startcol5 = $startcol4 + (TransactionTypePeer::NUM_COLUMNS - TransactionTypePeer::NUM_LAZY_LOAD_COLUMNS);
    
    AssociatePeer::addSelectColumns($criteria);
    $startcol6 = $startcol5 + (AssociatePeer::NUM_COLUMNS - AssociatePeer::NUM_LAZY_LOAD_COLUMNS);
    
    CashPeer::addSelectColumns($criteria);
    $startcol7 = $startcol6 + (CashPeer::NUM_COLUMNS - CashPeer::NUM_LAZY_LOAD_COLUMNS);
    
    sfGuardUserPeer::addSelectColumns($criteria);
    $startcol8 = $startcol7 + (sfGuardUserPeer::NUM_COLUMNS - sfGuardUserPeer::NUM_LAZY_LOAD_COLUMNS);

    $criteria->addJoin(AccountTransactionPeer::ID, TransactionPeer::ID, $join_behavior);

    $criteria->addJoin(AccountTransactionPeer::ACCOUNT_ID, AccountPeer::ID, $join_behavior);
    
    $criteria->addJoin(TransactionPeer::TRANSACTION_TYPE_ID, TransactionTypePeer::ID, $join_behavior);
    
    $criteria->addJoin(AccountPeer::ASSOCIATE_ID, AssociatePeer::ID, $join_behavior);
    
    $criteria->addJoin(TransactionPeer::CASH_ID, CashPeer::ID, $join_behavior);
    
    $criteria->addJoin(TransactionPeer::USER_ID, sfGuardUserPeer::ID, $join_behavior);

    // symfony_behaviors behavior
    foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
    {
      call_user_func($sf_hook, 'BaseAccountTransactionPeer', $criteria, $con);
    }

    $stmt = BasePeer::doSelect($criteria, $con);
    $results = array();

    while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $key1 = AccountTransactionPeer::getPrimaryKeyHashFromRow($row, 0);
            if (null !== ($obj1 = AccountTransactionPeer::getInstanceFromPool($key1))) {
                    // We no longer rehydrate the object, since this can cause data loss.
                    // See http://propel.phpdb.org/trac/ticket/509
                    // $obj1->hydrate($row, 0, true); // rehydrate
            } else {
                    $cls = AccountTransactionPeer::getOMClass(false);

                    $obj1 = new $cls();
                    $obj1->hydrate($row);
                    AccountTransactionPeer::addInstanceToPool($obj1, $key1);
            } // if obj1 already loaded

            // Add objects for joined Transaction rows

            $key2 = TransactionPeer::getPrimaryKeyHashFromRow($row, $startcol2);
            if ($key2 !== null) {
                    $obj2 = TransactionPeer::getInstanceFromPool($key2);
                    if (!$obj2) {

                            $cls = TransactionPeer::getOMClass(false);

                            $obj2 = new $cls();
                            $obj2->hydrate($row, $startcol2);
                            TransactionPeer::addInstanceToPool($obj2, $key2);
                    } // if obj2 loaded

                    // Add the $obj1 (AccountTransaction) to the collection in $obj2 (Transaction)
                    $obj1->setTransaction($obj2);
            } // if joined row not null

            // Add objects for joined Account rows

            $key3 = AccountPeer::getPrimaryKeyHashFromRow($row, $startcol3);
            if ($key3 !== null) {
                    $obj3 = AccountPeer::getInstanceFromPool($key3);
                    if (!$obj3) {

                            $cls = AccountPeer::getOMClass(false);

                            $obj3 = new $cls();
                            $obj3->hydrate($row, $startcol3);
                            AccountPeer::addInstanceToPool($obj3, $key3);
                    } // if obj3 loaded

                    // Add the $obj1 (AccountTransaction) to the collection in $obj3 (Account)
                    $obj3->addAccountTransaction($obj1);
            } // if joined row not null
            
            $key4 = TransactionTypePeer::getPrimaryKeyHashFromRow($row, $startcol4);
            if ($key4 !== null) {
                    $obj4 = TransactionTypePeer::getInstanceFromPool($key4);
                    if (!$obj4) {

                            $cls = TransactionTypePeer::getOMClass(false);

                            $obj4 = new $cls();
                            $obj4->hydrate($row, $startcol4);
                            TransactionTypePeer::addInstanceToPool($obj4, $key4);
                    } // if obj3 loaded

                    // Add the $obj1 (AccountTransaction) to the collection in $obj3 (Account)
                    $obj2->setTransactionType($obj4);
            } // if joined row not null
            
            $key5 = AssociatePeer::getPrimaryKeyHashFromRow($row, $startcol5);
            if ($key5 !== null) {
                    $obj5 = AssociatePeer::getInstanceFromPool($key5);
                    if (!$obj5) {

                            $cls = AssociatePeer::getOMClass(false);

                            $obj5 = new $cls();
                            $obj5->hydrate($row, $startcol5);
                            AssociatePeer::addInstanceToPool($obj5, $key5);
                    } // if obj3 loaded

                    // Add the $obj1 (AccountTransaction) to the collection in $obj3 (Account)
                    $obj3->setAssociate($obj5);
            } // if joined row not null
            
            $key6 = CashPeer::getPrimaryKeyHashFromRow($row, $startcol6);
            if ($key6 !== null) {
                    $obj6 = CashPeer::getInstanceFromPool($key6);
                    if (!$obj6) {

                            $cls = CashPeer::getOMClass(false);

                            $obj6 = new $cls();
                            $obj6->hydrate($row, $startcol6);
                            CashPeer::addInstanceToPool($obj6, $key6);
                    } // if obj3 loaded

                    // Add the $obj1 (AccountTransaction) to the collection in $obj3 (Account)
                    $obj2->setCash($obj6);
            } // if joined row not null
            
             $key7 = sfGuardUserPeer::getPrimaryKeyHashFromRow($row, $startcol7);
            if ($key7 !== null) {
                    $obj7 = sfGuardUserPeer::getInstanceFromPool($key7);
                    if (!$obj7) {

                            $cls = sfGuardUserPeer::getOMClass(false);

                            $obj7 = new $cls();
                            $obj7->hydrate($row, $startcol7);
                            sfGuardUserPeer::addInstanceToPool($obj7, $key7);
                    } // if obj3 loaded

                    // Add the $obj1 (AccountTransaction) to the collection in $obj3 (Account)
                    $obj2->setUser($obj7);
            } // if joined row not null

            // Add objects for joined AccountBankbook rows

            $results[] = $obj1;
    }
    $stmt->closeCursor();
    return $results;
  }
  
  /**
   * @see parent::getMixerPreSelectHook
   * 
   * @param type $method
   * @return type 
   */
  private static function getMixerPreSelectHook($method)
  {
    if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
    {
      return sprintf('BaseAccountTransactionPeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
    }

    throw new LogicException(sprintf('Unrecognized function "%s"', $method));
  }
} // AccountTransactionPeer
